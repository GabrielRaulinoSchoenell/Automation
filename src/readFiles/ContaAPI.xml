<?xml version="1.0" encoding="UTF-8"?>
<api context="/context" name="ContaAPI.xml" version="v1" version-type="url" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="GET" uri-template="/account/{externalId}">
        <inSequence>
            <log level="full">
                <property name="log" value="log"/>
            </log>
            <salesforcerest.sObjectRowsByExternalId configKey="init-salesforce">
                <customObject>Account</customObject>
                <externalIdField>IdIntelbras__c</externalIdField>
                <externalIdFieldValue>{get-property("uri.var.externalId")}</externalIdFieldValue>
            </salesforcerest.sObjectRowsByExternalId>
            <log level="full"/>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
    <resource methods="POST" uri-template="/create">
        <inSequence>
            <enrich>
                <source clone="true" type="body"/>
                <target property="bodyInicial" type="property"/>
            </enrich>
            <property expression="$ctx:bodyInicial" name="bodyInicial" scope="default" type="STRING"/>
            <log level="full">
                <property name="log" value="log"/>
                <property expression="$ctx:bodyInicial" name="log"/>
            </log>
            <salesforcerest.create configKey="init-salesforce">
                <sObjectName>Account</sObjectName>
                <fieldAndValue>{get-property("bodyInicial")}</fieldAndValue>
            </salesforcerest.create>
            <log level="full"/>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
    <resource methods="PATCH" uri-template="/account/{externalId}">
        <inSequence>
            <enrich>
                <source clone="true" type="body"/>
                <target property="bodyInicial" type="property"/>
            </enrich>
            <property expression="$ctx:bodyInicial" name="bodyInicial" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_ACCESS_TOKEN')" name="SALESFORCE_ACCESS_TOKEN" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_API_VERSION')" name="SALESFORCE_API_VERSION" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_HOST_NAME')" name="SALESFORCE_HOST_NAME" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_REFRESH_TOKEN')" name="SALESFORCE_REFRESH_TOKEN" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_CLIENT_SECRET')" name="SALESFORCE_CLIENT_SECRET" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_CLIENT_ID')" name="SALESFORCE_CLIENT_ID" scope="default" type="STRING"/>
            <property expression="get-property('env','SALESFORCE_API_URL')" name="SALESFORCE_API_URL" scope="default" type="STRING"/>
            <salesforcerest.upsert configKey="init-salesforce">
                <sObjectName>Account</sObjectName>
                <externalIDField>IdIntelbras__c</externalIDField>
                <Id>{get-property("uri.var.externalId")}</Id>
                <fieldAndValue>{get-property("bodyInicial")}</fieldAndValue>
            </salesforcerest.upsert>
            <log level="full"/>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <log level="full">
                <property name="log-error" value="log-error"/>
            </log>
            <respond/>
        </faultSequence>
    </resource>
    <!-- depreciadas -->
        <resource methods="GET" uri-template="/customerGroup/{param}">
                <inSequence>
                    <!-- --><log level="custom">
                        <!-- --><property name="Endpoint foi depreciado." value="nova funcionalidade na API DataExportsAPI"/>
                    <!-- --></log>
                    <property name="query" scope="default" type="STRING" value="select Id, Name, Channel__c, CustomerGroupCode__c, Description__c, SubGroup__c, SubGroupText__c, IsDeleted, IsDistributor__c, IsReseller__c, IDCustomerGroupDynamics__c, IDSubGroupDynamics__c from customergroup__c  WHERE LastModifiedDate = "/>
                    <property expression="fn:concat(get-property('query'),get-property('uri.var.param'))" name="salesforceQuery" scope="default" type="STRING"/>
                    <salesforcerest.query configKey="init-salesforce">
                        <queryString>{get-property("salesforceQuery")}</queryString>
                    </salesforcerest.query>
                    <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
                    <filter regex="0" source="json-eval($.totalSize)">
                        <then>
                            <log level="full">
                                <property name="SemRegistros" value="a processar"/>
                            </log>
                        </then>
                        <else>
                            <payloadFactory media-type="xml">
                                <format>
                                    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                                        <soapenv:Header/>
                                        <soapenv:Body>
        $1
                    </soapenv:Body>
                                    </soapenv:Envelope>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="$body"/>
                                </args>
                            </payloadFactory>
                            <xslt key="conf:transform/TransformJsonObjectCustomerGroup.xslt"/>
                            <property name="REST_URL_POSTFIX" scope="default" type="STRING" value=""/>
                            <property name="REST_URL_POSTFIX" scope="axis2" type="STRING" value=""/>
                            <header expression="fn:concat(get-property('env','URL_PLANEJAMENTO'), '/services/SalesforceAccountDSS.SOAP12Endpoint')" name="To" scope="default"/>
                            <call>
                                <endpoint>
                                    <default format="soap12">
                                        <suspendOnFailure>
                                            <initialDuration>-1</initialDuration>
                                            <progressionFactor>-1</progressionFactor>
                                            <maximumDuration>0</maximumDuration>
                                        </suspendOnFailure>
                                        <markForSuspension>
                                            <retriesBeforeSuspension>0</retriesBeforeSuspension>
                                        </markForSuspension>
                                    </default>
                                </endpoint>
                            </call>
                        </else>
                    </filter>
                    <respond/>
                </inSequence>
                <outSequence/>
                <faultSequence/>
            </resource>
            <resource methods="GET" uri-template="/accountCustomerGroup/{param}">
                <inSequence>
                    <property name="query" scope="default" type="STRING" value="select Id, Name, Account__c, CustomerGroup__c, IsDeleted, pcimember__c, pcimemberlevel__c, pcimembersince__c, pcimembersuspended__c, pcimembertype__c, principal__c from AccountCustomerGroup__c WHERE LastModifiedDate =  "/>
                    <property expression="fn:concat(get-property('query'),get-property('uri.var.param'))" name="salesforceQuery" scope="default" type="STRING"/>
                    <salesforcerest.query configKey="init-salesforce">
                        <queryString>{get-property("salesforceQuery")}</queryString>
                    </salesforcerest.query>
                    <filter regex="0" source="json-eval($.totalSize)">
                        <then>
                            <log level="full">
                                <property name="SemRegistros" value="a processar"/>
                            </log>
                        </then>
                        <else>
                            <payloadFactory media-type="xml">
                                <format>
                                    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                                        <soapenv:Header/>
                                        <soapenv:Body>
                                        <log level="custom">
                                            <property name="teste" value="rteset"/>                            
                                        </log>
        $1  
                    </soapenv:Body>
                                    </soapenv:Envelope>
                                </format>
                                <args>
                                    <arg evaluator="xml" expression="$body"/>
                                </args>
                            </payloadFactory>
                            <xslt key="conf:transform/TransformJsonObjectAccountCustomerGroup.xslt"/>
                            <header expression="fn:concat(get-property('env','URL_PLANEJAMENTO'), '/services/SalesforceAccountDSS.SOAP12Endpoint')" name="To" scope="default"/>
                            <call>
                                <endpoint>
                                    <default format="soap12">
                                        <suspendOnFailure>
                                            <initialDuration>-1</initialDuration>
                                            <progressionFactor>-1</progressionFactor>
                                            <maximumDuration>0</maximumDuration>
                                        </suspendOnFailure>
                                        <markForSuspension>
                                            <retriesBeforeSuspension>0</retriesBeforeSuspension>
                                        </markForSuspension>
                                    </default>
                                </endpoint>
                            </call>
                        </else>
                    </filter>
                    <respond/>
                </inSequence>
                <outSequence/>
                <faultSequence/>
            </resource>

    <!-- - - - - - - - -->
    <resource methods="GET" uri-template="/accountBenefits/{param}">
        <inSequence>
            <property name="query" scope="default" type="STRING" value="SELECT Id,Account__r.ExternalId__c, Segment__r.ExternalId__c, Segment__r.Name, TypeOfBenefit__c, DiscountPercent__c, Blocked__c, IncludesQuarterlyGoal__c, BlockDate__c, Blocked90Days__c, InfringementBlocking__c, Active__c, AdvantageAmount__c, BenefitFinalDate__c, PreferredDistributor1__r.ExternalId__c, PreferredDistributor2__r.ExternalId__c,  FamilyCode__c, ProductFamily__c, AccountCustomerGroup__c, DistributorUpdate__c, DistributorUpdate2__c, QuarterBenefits1__c, QuarterBenefits2__c, NameSegment__c, IncludesTeamGoal__c, IsDeleted from PCIAccountBenefits__c where  DiscountPercent__c != NULL AND  LastModifiedDate =  "/>
            <property expression="fn:concat(get-property('query'),get-property('uri.var.param'))" name="salesforceLeadQuery" scope="default" type="STRING"/>
            <salesforcerest.queryAll configKey="init-salesforce">
                <queryString>{get-property("salesforceLeadQuery")}</queryString>
            </salesforcerest.queryAll>
            <property name="messageType" scope="axis2" type="STRING" value="application/xml"/>
            <filter regex="0" source="json-eval($.totalSize)">
                <then>
                    <log level="full">
                        <property name="SemRegistros" value="a processar"/>
                    </log>
                </then>
                <else/>
            </filter>
            <xslt key="conf:transform/TransformJsonObjectAccountPCIBenefits.xslt"/>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
