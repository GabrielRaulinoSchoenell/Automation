<?xml version="1.0" encoding="UTF-8"?>
<api context="/callcenter" name="AtendimentoCallCenterAPI" version="v1" version-type="url" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" uri-template="/protocol">
        <inSequence>
            <sequence key="EnvironmentVariablesSequence"/>
            <property name="CHARACTER_SET_ENCODING" scope="axis2" type="STRING" value="UTF-8"/>
            <propertyGroup>
                <property expression="json-eval($.cpf)" name="cpf" scope="default" type="STRING"/>
                <property expression="json-eval($.protocol)" name="protocol" scope="default" type="STRING"/>
                <property expression="json-eval($.subject)" name="subject" scope="default" type="STRING"/>
                <property expression="json-eval($.name)" name="name" scope="default" type="STRING"/>
                <property expression="json-eval($.email)" name="email" scope="default" type="STRING"/>
                <property expression="json-eval($.phone)" name="phone" scope="default" type="STRING"/>
                <property expression="json-eval($.origin)" name="origin" scope="default" type="STRING"/>
                <property expression="json-eval($.description)" name="description" scope="default" type="STRING"/>
                <property name="quote" scope="default" type="STRING" value="'"/>
                <property name="query" scope="default" type="STRING" value="SELECT Id , AccountId FROM Contact WHERE DocumentNumber__c=  "/>
                <property expression="fn:concat(get-property('query'),get-property('quote'),get-property('cpf'),get-property('quote'))" name="salesforceQuery" scope="default" type="STRING"/>
            </propertyGroup>
            <switch source="get-property('origin')">
                <case regex="CHAT">
                    <property name="caseType" scope="default" type="STRING" value="Suporte"/>
                    <property expression="get-property('uri.var.recordTypeIdQueueServiceChatWhatsapp')" name="caseOwner" scope="default" type="STRING"/>
                    <property expression="get-property('uri.var.recordTypeIdTaskTelephony')" name="recordTypeIdTask" scope="default" type="STRING"/>
                </case>
                <case regex="Whatsapp">
                    <property name="caseType" scope="default" type="STRING" value="Suporte"/>
                    <property expression="get-property('uri.var.recordTypeIdQueueServiceChatWhatsapp')" name="caseOwner" scope="default" type="STRING"/>
                    <property expression="get-property('uri.var.recordTypeIdTaskTelephony')" name="recordTypeIdTask" scope="default" type="STRING"/>
                </case>
                <case regex="Reclame aqui">
                    <property name="caseType" scope="default" type="STRING" value="Reclamação"/>
                    <property expression="get-property('uri.var.recordTypeIdQueueServiceClaimHere')" name="caseOwner" scope="default" type="STRING"/>
                    <property expression="get-property('uri.var.recordTypeIdTaskClaimHere')" name="recordTypeIdTask" scope="default" type="STRING"/>
                </case>
                <default>
                    <property name="caseType" scope="default" type="STRING" value="Suporte"/>
                    <property expression="get-property('uri.var.recordTypeIdQueueCallCenterService')" name="caseOwner" scope="default" type="STRING"/>
                    <property expression="get-property('uri.var.recordTypeIdTaskTelephony')" name="recordTypeIdTask" scope="default" type="STRING"/>
                </default>
            </switch>
            <salesforcerest.query configKey="init-salesforce">
                <queryString>{get-property("salesforceQuery")}</queryString>
            </salesforcerest.query>
            <property expression="json-eval($.records[0].Id)" name="contactId" scope="default" type="STRING"/>
            <property expression="json-eval($.records[0].AccountId)" name="AccountId" scope="default" type="STRING"/>
            <property expression="json-eval($.totalSize)" name="totalSize" scope="default" type="STRING"/>
            <filter regex="1" source="$ctx:totalSize">
                <then>
                    <log level="custom">
                        <property name="then" value="then"/>
                    </log>
                    <payloadFactory media-type="json">
                        <format>
							{&#xd;
							"AccountId" : "$1",&#xd;
							"ContactId" : "$2",&#xd;
							"PhoneProtocol__c" : "$3",&#xd;
							"Origin" : "$4",&#xd;
							"CustomerDocument__c" : "$5",&#xd;
							"RecordTypeId" : "$6",&#xd;
							"SuppliedName" : "$7",&#xd;
							"SuppliedEmail" : "$8",&#xd;
							"SuppliedPhone" : "$9",&#xd;
							"OwnerId": "$10"&#xd;,
							"Description": "$11"&#xd;,
							"CaseType__c": "$12"&#xd;
							}
						</format>
                        <args>
                            <arg evaluator="json" expression="$.records[0].AccountId" literal="true"/>
                            <arg evaluator="xml" expression="get-property('contactId')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('protocol')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('origin')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('cpf')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('uri.var.recordTypeIdCustomerservice')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('name')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('email')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('phone')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('caseOwner')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('description')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('caseType')" literal="true"/>
                        </args>
                    </payloadFactory>
                    <log level="full"/>
                    <enrich>
                        <source clone="true" type="body"/>
                        <target property="case_content" type="property"/>
                    </enrich>
                    <salesforcerest.create configKey="init-salesforce">
                        <sObjectName>Case</sObjectName>
                        <fieldAndValue>{get-property("case_content")}</fieldAndValue>
                    </salesforcerest.create>
                    <enrich>
                        <source clone="true" type="body"/>
                        <target property="return__case_salesforce" type="property"/>
                    </enrich>
                    <property expression="get-property('axis2', 'HTTP_SC')" name="http_status_code" scope="default" type="STRING"/>
                    <log>
                        <property expression="$ctx:http_status_code" name="http"/>
                    </log>
                    <filter xpath="$ctx:http_status_code != '201'">
                        <then>
                            <log level="custom">
                                <property name="then" value="then"/>
                            </log>
                            <payloadFactory media-type="json">
                                <format>
									{ "description":"An error occours", "salesforceReturn": $1}</format>
                                <args>
                                    <arg evaluator="xml" expression="get-property('return__case_salesforce')"/>
                                </args>
                            </payloadFactory>
                            <respond/>
                        </then>
                        <else/>
                    </filter>
                    <log level="full"/>
                    <property expression="json-eval($.id)" name="caseId" scope="default" type="STRING"/> 
                    <filter regex="Telefone|Reclame aqui" source="get-property('origin')">
                        <then>
                            <payloadFactory media-type="json">
                                <format>
									{&#xd;
									"Subject" : "$1",&#xd;
									"WhatId" : "$2",&#xd;
									"WhoId" : "$3",&#xd;
									"Protocol__c":"$4",
									"RecordTypeId" : "$5"
									}
								</format>
                                <args>
                                    <arg evaluator="xml" expression="get-property('subject')"/>
                                    <arg evaluator="xml" expression="get-property('caseId')"/>
                                    <arg evaluator="xml" expression="get-property('contactId')"/>
                                    <arg evaluator="xml" expression="get-property('protocol')"/>
                                    <arg evaluator="xml" expression="get-property('recordTypeIdTask')"/>
                                </args>
                            </payloadFactory>
                            <enrich>
                                <source clone="true" type="body"/>
                                <target property="case_content" type="property"/>
                            </enrich>
                            <log level="full"/>
                            <salesforcerest.create configKey="init-salesforce">
                                <sObjectName>Task</sObjectName>
                                <fieldAndValue>{get-property("case_content")}</fieldAndValue>
                            </salesforcerest.create>
                            <enrich>
                                <source clone="true" type="body"/>
                                <target property="return__task_salesforce" type="property"/>
                            </enrich>
                            <property expression="get-property('axis2', 'HTTP_SC')" name="http_status_code" scope="default" type="STRING"/>
                            <log>
                                <property expression="$ctx:http_status_code" name="http"/>
                            </log>
                            <filter xpath="$ctx:http_status_code != '201'">
                                <then>
                                    <log level="custom">
                                        <property name="then" value="then"/>
                                    </log>
                                    <payloadFactory media-type="json">
                                        <format>
											{ "description":"An error occours", "salesforceReturn": $1}</format>
                                        <args>
                                            <arg evaluator="xml" expression="get-property('return__task_salesforce')"/>
                                        </args>
                                    </payloadFactory>
                                    <respond/>
                                </then>
                                <else/>
                            </filter>
                            <log level="full"/>
                            <property expression="json-eval($.id)" name="taskId" scope="default" type="STRING"/>
                        </then>
                        <else/>
                    </filter>
                    <property expression="fn:concat(get-property('uri.var.urlSalesforcePublicHostname'),'/lightning/r/Case/', get-property('caseId'),'/view')" name="uri" scope="default" type="STRING"/>
                    <payloadFactory media-type="json">
                        <format>
							{ "uri" : "$1",
							"caseId": "$2",
							"taskId":"$3" }
						</format>
                        <args>
                            <arg evaluator="xml" expression="get-property('uri')"/>
                            <arg evaluator="xml" expression="get-property('caseId')"/>
                            <arg evaluator="xml" expression="get-property('taskId')"/>
                        </args>
                    </payloadFactory>
                    <respond/>
                </then>
                <else>
                    <log level="custom">
                        <property name="else" value="Contato não encontrado"/>
                    </log>
                    <payloadFactory media-type="json">
                        <format>
							{&#xd;
							"PhoneProtocol__c" : "$1",&#xd;
							"Origin" : "$2",&#xd;
							"CustomerDocument__c" : "$3",&#xd;
							"RecordTypeId" : "$4",&#xd;
							"SuppliedName" : "$5",&#xd;
							"SuppliedEmail" : "$6",&#xd;
							"SuppliedPhone" : "$7",&#xd;
							"OwnerId": "$8"&#xd;,
							"Description": "$9"&#xd;,
							"CaseType__c": "$10"&#xd;
							}
						</format>
                        <args>
                            <arg evaluator="xml" expression="get-property('protocol')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('origin')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('cpf')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('uri.var.recordTypeIdCustomerservice')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('name')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('email')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('phone')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('caseOwner')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('description')" literal="true"/>
                            <arg evaluator="xml" expression="get-property('caseType')" literal="true"/>
                        </args>
                    </payloadFactory>
                    <log level="full"/>
                    <enrich>
                        <source clone="true" type="body"/>
                        <target property="case_content" type="property"/>
                    </enrich>
                    <salesforcerest.create configKey="init-salesforce">
                        <sObjectName>Case</sObjectName>
                        <fieldAndValue>{get-property("case_content")}</fieldAndValue>
                    </salesforcerest.create>
                    <enrich>
                        <source clone="true" type="body"/>
                        <target property="return__case_salesforce" type="property"/>
                    </enrich>
                    <property expression="get-property('axis2', 'HTTP_SC')" name="http_status_code" scope="default" type="STRING"/>
                    <log>
                        <property expression="$ctx:http_status_code" name="http"/>
                    </log>
                    <filter xpath="$ctx:http_status_code != '201'">
                        <then>
                            <log level="custom">
                                <property name="then" value="then"/>
                            </log>
                            <payloadFactory media-type="json">
                                <format>
									{ "description":"An error occours", "salesforceReturn": $1}</format>
                                <args>
                                    <arg evaluator="xml" expression="get-property('return__case_salesforce')"/>
                                </args>
                            </payloadFactory>
                            <respond/>
                        </then>
                        <else/>
                    </filter>
                    <log level="full"/>
                    <property expression="json-eval($.id)" name="caseId" scope="default" type="STRING"/>
                    <filter regex="Telefone|Reclame aqui" source="get-property('origin')">
                        <then>
                            <payloadFactory media-type="json">
                                <format>
									{&#xd;
									"Subject" : "$1",&#xd;
									"WhatId" : "$2",&#xd;
									"Protocol__c":"$3",
									"RecordTypeId" : "$4"
									}
								</format>
                                <args>
                                    <arg evaluator="xml" expression="get-property('subject')"/>
                                    <arg evaluator="xml" expression="get-property('caseId')"/>
                                    <arg evaluator="xml" expression="get-property('protocol')"/>
                                    <arg evaluator="xml" expression="get-property('recordTypeIdTask')"/>
                                </args>
                            </payloadFactory>
                            <enrich>
                                <source clone="true" type="body"/>
                                <target property="case_content" type="property"/>
                            </enrich>
                            <log level="full"/>
                            <salesforcerest.create configKey="init-salesforce">
                                <sObjectName>Task</sObjectName>
                                <fieldAndValue>{get-property("case_content")}</fieldAndValue>
                            </salesforcerest.create>
                            <enrich>
                                <source clone="true" type="body"/>
                                <target property="return__task_salesforce" type="property"/>
                            </enrich>
                            <property expression="get-property('axis2', 'HTTP_SC')" name="http_status_code" scope="default" type="STRING"/>
                            <log>
                                <property expression="$ctx:http_status_code" name="http"/>
                            </log>
                            <filter xpath="$ctx:http_status_code != '201'">
                                <then>
                                    <log level="custom">
                                        <property name="then" value="then"/>
                                    </log>
                                    <payloadFactory media-type="json">
                                        <format>
											{ "description":"An error occours", "salesforceReturn": $1}</format>
                                        <args>
                                            <arg evaluator="xml" expression="get-property('return__task_salesforce')"/>
                                        </args>
                                    </payloadFactory>
                                    <respond/>
                                </then>
                                <else/>
                            </filter>
                            <log level="full"/>
                            <property expression="json-eval($.id)" name="taskId" scope="default" type="STRING"/>
                        </then>
                        <else/>
                    </filter>
                    <property expression="fn:concat(get-property('uri.var.urlSalesforcePublicHostname'),'/lightning/r/Case/', get-property('caseId'),'/view')" name="uri" scope="default" type="STRING"/>
                    <payloadFactory media-type="json">
                        <format>
							{ "uri" : "$1",
							"caseId": "$2",
							"taskId":"$3" }
						</format>
                        <args>
                            <arg evaluator="xml" expression="get-property('uri')"/>
                            <arg evaluator="xml" expression="get-property('caseId')"/>
                            <arg evaluator="xml" expression="get-property('taskId')"/>
                        </args>
                    </payloadFactory>
                    <respond/>
                </else>
            </filter>
        </inSequence>
        <outSequence>
            <send/>
        </outSequence>
        <faultSequence>
            <send/>
        </faultSequence>
    </resource>
    <resource methods="PUT" uri-template="/updateTask/{id}">
        <inSequence>
            <property expression="json-eval($.callDurationInSeconds)" name="callDurationInSeconds" scope="default" type="STRING"/>
            <property expression="json-eval($.npsScore1)" name="npsScore1" scope="default" type="STRING"/>
            <property expression="json-eval($.npsScore2)" name="npsScore2" scope="default" type="STRING"/>
            <property expression="json-eval($.urlRecording)" name="urlRecording" scope="default" type="STRING"/>
            <property expression="json-eval($.callDisconnection)" name="callDisconnection" scope="default" type="STRING"/>
            <property expression="json-eval($.queueTime)" name="queueTime" scope="default" type="STRING"/>
            <property expression="$ctx:uri.var.id" name="taskId" scope="default" type="STRING"/>
            <payloadFactory media-type="json">
                <format>
					{&#xd;
					"CallDurationInSeconds" : "$1",&#xd;
					"NPSScore1__c" : "$2",&#xd;
					"NPSScore2__c" : "$3",&#xd;
					"URLRecording__c" : "$4",&#xd;
					"CallDisconnection__c" : "$5",&#xd;
					"QueueTime__c" : "$6"&#xd;
					}
				</format>
                <args>
                    <arg evaluator="xml" expression="get-property('callDurationInSeconds')"/>
                    <arg evaluator="xml" expression="get-property('npsScore1')"/>
                    <arg evaluator="xml" expression="get-property('npsScore2')"/>
                    <arg evaluator="xml" expression="get-property('urlRecording')"/>
                    <arg evaluator="xml" expression="get-property('callDisconnection')"/>
                    <arg evaluator="xml" expression="get-property('queueTime')"/>
                </args>
            </payloadFactory>
            <enrich>
                <source clone="true" type="body"/>
                <target property="task_content" type="property"/>
            </enrich>
            <salesforcerest.update configKey="init-salesforce">
                <sObjectName>Task</sObjectName>
                <Id>{get-property("taskId")}</Id>
                <fieldAndValue>{get-property("task_content")}</fieldAndValue>
            </salesforcerest.update>
            <enrich>
                <source clone="true" type="body"/>
                <target property="return__task_salesforce" type="property"/>
            </enrich>
            <property expression="get-property('axis2', 'HTTP_SC')" name="http_status_code" scope="default" type="STRING"/>
            <log>
                <property expression="$ctx:http_status_code" name="http"/>
            </log>
            <filter xpath="$ctx:http_status_code != '204'">
                <then>
                    <payloadFactory media-type="json">
                        <format>
							{ "description":"An error occours", "salesforceReturn": $1}</format>
                        <args>
                            <arg evaluator="xml" expression="get-property('ERROR_CODE')"/>
                        </args>
                    </payloadFactory>
                    <respond/>
                </then>
                <else/>
            </filter>
            <respond/>
        </inSequence>
        <outSequence>
            <send/>
        </outSequence>
        <faultSequence>
            <payloadFactory media-type="json">
                <format>
					{ "description":"An error occours", "salesforceReturn": "", "errorCode": "$1"}</format>
                <args>
                    <arg evaluator="xml" expression="get-property('return__task_salesforce')"/>
                </args>
            </payloadFactory>
            <send/>
        </faultSequence>
    </resource>
    <resource methods="PUT" uri-template="/updateTask/idExterno/{id}">
        <inSequence>
            <property expression="json-eval($.callDurationInSeconds)" name="callDurationInSeconds" scope="default" type="STRING"/>
            <property expression="json-eval($.npsScore1)" name="npsScore1" scope="default" type="STRING"/>
            <property expression="json-eval($.npsScore2)" name="npsScore2" scope="default" type="STRING"/>
            <property expression="json-eval($.urlRecording)" name="urlRecording" scope="default" type="STRING"/>
            <property expression="json-eval($.callDisconnection)" name="callDisconnection" scope="default" type="STRING"/>
            <property expression="json-eval($.queueTime)" name="queueTime" scope="default" type="STRING"/>
            <property expression="json-eval($.backDoingBusiness)" name="backDoingBusiness" scope="default" type="STRING"/>
            <property expression="json-eval($.evaluationDate)" name="evaluationDate" scope="default" type="STRING"/>
            <property expression="json-eval($.customersConsideration)" name="customersConsideration" scope="default" type="STRING"/>
            <property expression="json-eval($.resolved)" name="resolved" scope="default" type="STRING"/>
            <property expression="$ctx:uri.var.id" name="taskId" scope="default" type="STRING"/>
            <payloadFactory media-type="json">
                <format>
					{&#xd;
					"CallDurationInSeconds" : "$1",&#xd;
					"NPSScore1__c" : "$2",&#xd;
					"NPSScore2__c" : "$3",&#xd;
					"URLRecording__c" : "$4",&#xd;
					"CallDisconnection__c" : "$5",&#xd;
					"QueueTime__c" : "$6",&#xd;
					"BackDoingBusiness__c" : "$7",&#xd;
					"ServiceEvaluate__c" : "$8",&#xd;
					"EvaluationDate__c" : "$9",&#xd;
					"CustomersConsideration__c" : "$10",&#xd;
                    "Resolved__c" : "$11"&#xd;
					}
				</format>
                <args>
                    <arg evaluator="xml" expression="get-property('callDurationInSeconds')"/>
                    <arg evaluator="xml" expression="get-property('npsScore1')"/>
                    <arg evaluator="xml" expression="get-property('npsScore2')"/>
                    <arg evaluator="xml" expression="get-property('urlRecording')"/>
                    <arg evaluator="xml" expression="get-property('callDisconnection')"/>
                    <arg evaluator="xml" expression="get-property('queueTime')"/>
                    <arg evaluator="xml" expression="get-property('backDoingBusiness')"/>
                    <arg evaluator="xml" expression="get-property('npsScore1')"/>
                    <arg evaluator="xml" expression="get-property('evaluationDate')"/>
                    <arg evaluator="xml" expression="get-property('customersConsideration')"/>
                    <arg evaluator="xml" expression="get-property('resolved')"/>
                </args>
            </payloadFactory>
            <enrich>
                <source clone="true" type="body"/>
                <target property="task_content" type="property"/>
            </enrich>
            <log level="full">
                <property expression="get-property('task_content')" name="task_content"/>
                <property expression="get-property('taskId')" name="taskId"/>
            </log>
            <salesforcerest.upsert configKey="init-salesforce">
                <sObjectName>Task</sObjectName>
                <externalIDField>Protocol__c</externalIDField>
                <Id>{get-property('taskId')}</Id>
                <fieldAndValue>{get-property('task_content')}</fieldAndValue>
            </salesforcerest.upsert>
            <enrich>
                <source clone="true" type="body"/>
                <target property="return__task_salesforce" type="property"/>
            </enrich>
            <respond/>
        </inSequence>
        <outSequence>
            <send/>
        </outSequence>
        <faultSequence>
            <payloadFactory media-type="json">
                <format>
					{ "description":"An error occours", "salesforceReturn": "", "errorCode": "$1"}</format>
                <args>
                    <arg evaluator="xml" expression="get-property('return__task_salesforce')"/>
                </args>
            </payloadFactory>
            <send/>
        </faultSequence>
    </resource>
    <resource methods="POST" uri-template="/facilitatedAttendiment">
        <inSequence>
            <sequence key="EnvironmentVariablesSequence"/>
            <enrich>
                <source clone="true" type="body"/>
                <target property="body_inicial" type="property"/>
            </enrich>
            <payloadFactory media-type="json">
                <format>
					{"typeService":"FA"}
				</format>
                <args/>
            </payloadFactory>
            <enrich>
                <source clone="true" type="body"/>
                <target property="body_context" type="property"/>
            </enrich>
            <enrich>
                <source clone="true" property="body_inicial" type="property"/>
                <target type="body"/>
            </enrich>
            <enrich>
                <source clone="true" property="body_context" type="property"/>
                <target action="child" xpath="json-eval($)"/>
            </enrich>
            <enrich>
                <source clone="true" type="body"/>
                <target property="body_enviado" type="property"/>
            </enrich>
            <call>
                <endpoint>
                    <http method="post" uri-template="{uri.var.urlAssist}/recOcorrencia_REST.php">
                        <timeout>
                            <duration>120000</duration>
                        </timeout>
                        <suspendOnFailure>
                            <initialDuration>-1</initialDuration>
                            <progressionFactor>-1</progressionFactor>
                            <maximumDuration>0</maximumDuration>
                        </suspendOnFailure>
                        <markForSuspension>
                            <retriesBeforeSuspension>0</retriesBeforeSuspension>
                        </markForSuspension>
                    </http>
                </endpoint>
            </call>
            <respond/>
        </inSequence>
        <outSequence>
            <send/>
        </outSequence>
        <faultSequence>
            <send/>
        </faultSequence>
    </resource>
</api>
